### Тестовое задание для middle-разработчика (Vue 3 / React)  

Технологический стек:  
- Vue 3 или React
- SPA (Single Page Application)
- TS (typescipt) 
- Архитектура Feature-Sliced Design (FSD)  
- Использование Vue Router / React Router для роутинга  
- Допустимо использование Pinia/Redux/MobX/Zustand и т.д. для глобального состояния  

---

Задачи:  

1. Реализовать три страницы:  
а) Список заявок (`/requests`)  
- Отображает список всех заявок.  
- У каждой заявки есть заголовок и дата создания.  
- Возможность кликнуть на заявку и перейти на страницу детальной информации.  
- Кнопка "Создать заявку" (переход на страницу /requests/new).  

б) Создание заявки (`/requests/new`)  
- Форма с полями:  
  - Название заявки (строка, обязательное поле)  
  - Описание (текст, обязательное поле)  
  - Выбор категории (из списка предустановленных значений)  
- Кнопка "Создать заявку", которая:  
  - Добавляет заявку в глобальный store (Pinia / Redux / аналоги).  
  - Перенаправляет пользователя обратно на страницу со списком заявок.  

в) Детальная страница заявки (`/requests/:id`)  
- Отображает полную информацию о заявке.  
- Кнопка "Удалить заявку", которая удаляет заявку из глобального состояния.  
- Кнопка "Редактировать заявку", которая открывает модальное окно с полями редактирования.  

---

2. Функциональность:  
 Маршрутизация подключена через Vue Router / React Router.  
 Глобальное хранение заявок через Pinia / Redux.  
 Создание заявок: по нажатию кнопки данные сохраняются и отображаются в списке.  
 Удаление и редактирование заявок.  
 Запоминание данных при обновлении страницы (например, с использованием LocalStorage).  
 Интерактивные элементы (например, при отсутствии заявок показывать "Нет данных").  

---

 3. Архитектура Features-Sliced Design (FSD):  

/src  
  ├── app/            - Инициализация приложения (настройки, роутер)  
  ├── pages/          - Страницы приложения  
  ├── widgets/        - Крупные составные UI-компоненты страниц  
  ├── features/       - Отдельные независимые фичи  
  ├── entities/       - Бизнес-сущности (структура заявки и её состояние)  
  ├── shared/         - Вспомогательные компоненты и утилиты  
  

---

4. Минимальные требования к коду:  
 Грамотная структура проекта в соответствии с Feature-Sliced Design.  
 Разделение логики на модули (не держать всё в компонентах).  
 Не дублировать код, а переиспользовать компоненты (например, форму создания/редактирования заявки).  
 Добавить обработку ошибок (например, если создать заявку без названия).  
 Чистый и читаемый код, стилистика кода единообразна.